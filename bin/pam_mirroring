#!/usr/bin/env python

import sys
import time
import pam_mujoco
import o80_pam
import o80
import logging
from lightargs import BrightArgs,Set,Range,Positive,FileExists

def configure():
    config = BrightArgs("pam mirroring: pam_mujoco mirroring o80_real or o80_mujoco")
    config.add_option("mujoco_id_pam_mujoco",
                      pam_mujoco.mujoco_ids.robot,
                      "mujoco id of the pam_mujoco instance",
                      str)
    config.add_option("mujoco_id_o80_pam",
                      o80_pam.mujoco_id,
                      "mujoco_id of the o80_mujoco instance (ignored if mirroring o80_real)",
                      str)
    config.add_option("segment_id_robot_mirror",
                      pam_mujoco.segment_ids.mirroring,
                      "segment_id of the pam_mujoco robot mirroring o80 controller",
                      str)
    config.add_option("segment_id_o80_pam",
                      o80_pam.segment_ids.robot,
                      "segment_id of the o80_real or o80_mujoco instance",
                      str)
    config.add_option("frequency",
                      300,
                      "mirroring frequency",
                      float,
                      [Positive()])
    change_all = False
    config.dialog(change_all)
    print()
    return config


if __name__ == "__main__":

    config = configure()

    log_handler = logging.StreamHandler(sys.stdout)
    logging.basicConfig(
        format="[pam mirroring {} {}] %(message)s".format(config.segment_id_o80_pam,
                                                          config.segment_id_robot_mirror),
        level=logging.DEBUG,
        handlers=[log_handler]
    )

    logging.info("waiting for mujoco_id: {}".format(config.mujoco_id_pam_mujoco))
    pam_mujoco.wait_for_mujoco(config.mujoco_id_pam_mujoco)
    
    logging.info("waiting for mujoco_id: {}".format(config.mujoco_id_o80_pam))
    pam_mujoco.wait_for_mujoco(config.mujoco_id_o80_pam)

    logging.info("creating o80 frontend to pam_mujoco robot mirroring")
    o80_mirroring = o80_pam.o80RobotMirroring(config.segment_id_robot_mirror)

    logging.info("creating o80 frontend to o80_real or o80_mujoco")
    o80_pressure = o80_pam.o80Pressures(config.segment_id_o80_pam)

    logging.info("creating controller manager")
    frequency_manager = o80.FrequencyManager(config.frequency)

    logging.info("starting")
    _,__,joint_positions,joint_velocities = o80_pressure.read()
    o80_mirroring.set(joint_positions,joint_velocities,duration_ms=1000,wait=True)

    try :
        while True:
            try:
                _,__,joint_positions,joint_velocities = o80_pressure.read()
                o80_mirroring.set(joint_positions,joint_velocities,
                                  duration_ms=None,wait=False)
            except Exception as e:
                logging.info("exception: {}. keyboard interrupt ?".format(e))
                break
            frequency_manager.wait()
    except KeyboardInterrupt:
        logging.info("keyboard interrupt, exiting")

    logging.info("exit")
    print()
            
