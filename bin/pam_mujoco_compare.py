"""
This is for comparing two files generated by pam_mujoco.
When creating a mujoco handle with the argument save_data to True, a 
corresponding csv file will be created and filled for as long 
as pam_mujoco is running. This csv file with map time stamp 
to the robot state (joint positions and velocities).
When passing the path to two of such files to this script, plots allowing 
to compare the state of the robot as provided in these two files will be displayed. 
"""

import sys
import pandas as pd
import matplotlib.pyplot as plt
from pathlib import Path
from typing import Tuple


def _plot(csv1: Path, csv2: Path) -> None:
    print("read", csv1)
    df1 = pd.read_csv(csv1)
    print("read", csv2)
    df2 = pd.read_csv(csv2)

    cols = [f"robot_position_{dof}" for dof in range(4)] + [
        f"robot_velocity_{dof}" for dof in range(4)
    ]

    fig, axs = plt.subplots(len(cols))

    for axis, coln in zip(axs, cols):
        print("plot", coln)
        for fileno, df in enumerate((df1, df2)):
            axis.plot(df["time_stamp"], df[coln], label=f"{coln}_{fileno}")
        axis.set_ylabel(coln)
        axis.legend()

    plt.show()


def _get_files() -> Tuple[Path, Path]:
    if len(sys.argv) != 3:
        raise ValueError("usage: pam_mujoco_compare path1 path2")

    file1 = Path(sys.argv[1])
    file2 = Path(sys.argv[2])

    if not file1.is_file():
        raise FileNotFoundError(f"failed to find file {file1}")

    if not file2.is_file():
        raise FileNotFoundError(f"failed to find file {file2}")

    return file1, file2


def _execute():
    file1, file2 = _get_files()
    _plot(file1, file2)


if __name__ == "__main__":
    try:
        _execute()
    except Exception as e:
        print(f"\n{e}\n")
