#!/usr/bin/env python3

import time
import o80
import pam_mujoco
import o80_pam
import sys
import logging
import shared_memory
import signal_handler
from lightargs import BrightArgs,Set,Range,Positive,FileExists


def _get_handle(mujoco_id,
                segment_id_robot,
                segment_id_ball,
                segment_id_goal,
                segment_id_hit_point):
    robot = pam_mujoco.MujocoRobot(segment_id_robot,
                                   control=pam_mujoco.MujocoRobot.JOINT_CONTROL)
    ball = pam_mujoco.MujocoItem(segment_id_ball,
                                 control=pam_mujoco.MujocoItem.CONSTANT_CONTROL)
    goal = pam_mujoco.MujocoItem(segment_id_goal,
                                 control=pam_mujoco.MujocoItem.CONSTANT_CONTROL)
    hit_point = pam_mujoco.MujocoItem(segment_id_hit_point,
                                      control=pam_mujoco.MujocoItem.CONSTANT_CONTROL)
    handle = pam_mujoco.MujocoHandle(mujoco_id,
                                     table=True,
                                     robot1=robot,
                                     balls=(ball,),
                                     goals=(goal,),
                                     hit_points=(hit_point,))
    return handle
    

def _execute_visualization(config):

    handle_to = _get_handle(config.mujoco_id_to,
                            config.mujoco_id_to+config.segment_id_robot,
                            config.mujoco_id_to+config.segment_id_ball,
                            config.mujoco_id_to+config.segment_id_goal,
                            config.mujoco_id_to+config.segment_id_hit_point)
    
    handle_from = pam_mujoco.MujocoHandle(config.mujoco_id_from,
                                          read_only=True)

    robot_get = handle_from.interfaces[config.segment_id_robot]
    robot_set = handle_to.interfaces[config.mujoco_id_to+config.segment_id_robot]

    ball_get = handle_from.interfaces[config.segment_id_ball]
    ball_set = handle_to.interfaces[config.mujoco_id_to+config.segment_id_ball]

    goal_get = handle_from.interfaces[config.segment_id_goal]
    goal_set = handle_to.interfaces[config.mujoco_id_to+config.segment_id_goal]

    hit_point_get = handle_from.interfaces[config.segment_id_hit_point]
    hit_point_set = handle_to.interfaces[config.mujoco_id_to+config.segment_id_hit_point]

    frequency = 100.0
    frequency_manager = o80.FrequencyManager(frequency)
    duration_ms = int(1.0e3/frequency)

    class UpdateIfChange:
        def __init__(self,
                     interface_get,
                     interface_set,
                     duration_ms):
            self._interface_get = interface_get
            self._interface_set = interface_set
            self._duration_ms = duration_ms
            self._previous1,self._previous2 = None,None
        def __call__(self):
            v1,v2=self._interface_get.get()
            if v1!=self._previous1 or v2!=self._previous2:
                self._interface_set.set(v1,
                                        v2,
                                        duration_ms=self._duration_ms)
                self._previous1,self._previous2=v1,v2

    update_if_changes = [UpdateIfChange(get_,set_,duration_ms)
                         for get_,set_ in ((ball_get,ball_set),
                                           (goal_get,goal_set),
                                           (hit_point_get,hit_point_set),
                                           (robot_get,robot_set))]
                
    signal_handler.init()
    while not signal_handler.has_received_sigint():
        for uic in update_if_changes:
            uic()
        frequency_manager.wait()
            
    handle_to.mujoco_exit()


def _configure():
    config = BrightArgs("pam mujoco visualization: graphics for an instance of pam_mujoco")
    config.add_option("mujoco_id_from",
                      "simulation",
                      "mujoco id of the pam_mujoco instance to represent ",
                      str)
    config.add_option("mujoco_id_to",
                      "visualization",
                      "mujoco id of the mujoco simulation spawned for visualization",
                      str)
    config.add_option("segment_id_robot",
                      "robot",
                      "segment_id of the robot controller to represent",
                      str)
    config.add_option("segment_id_ball",
                      "ball",
                      "segment_id of the ball controller to represent",
                      str)
    config.add_option("segment_id_goal",
                      "goal",
                      "segment_id of the goal controller to represent",
                      str)
    config.add_option("segment_id_hit_point",
                      "hit_point",
                      "segment_id of the hit point controller to represent",
                      str)

    change_all = False
    finished = config.dialog(change_all,sys.argv[1:])
    print()
    if finished:
        return config
    return None


def execute():

    config = _configure()

    if config is None:
        print()
        return
    
    _execute_visualization(config)

    print()

    
if __name__ == "__main__":

    execute()
