#!/usr/bin/env python3

import pam_mujoco
import o80_pam
import sys

MODEL_NAME = "pam_mujoco"
MUJOCO_ID = pam_mujoco.mujoco_ids.robot
SEGMENT_ID_BALL = pam_mujoco.segment_ids.ball
SEGMENT_ID_TARGET = pam_mujoco.segment_ids.target
SEGMENT_ID_MARKER = pam_mujoco.segment_ids.hit_point
SEGMENT_ID_ROBOT_MIRROR = pam_mujoco.segment_ids.mirroring
SEGMENT_ID_BURST = SEGMENT_ID_ROBOT_MIRROR
SEGMENT_ID_CONTACT_ROBOT = pam_mujoco.segment_ids.contact_robot
    

def execute(bursting_mode,graphics,realtime):

    items = pam_mujoco.model_factory(MODEL_NAME,
                                     table=True,robot1=True)

    ball = items["ball"]
    robot = items["robot"]

    # init mujoco
    config = pam_mujoco.MujocoConfig()
    config.graphics = graphics
    config.extended_graphics = False
    config.realtime = realtime
    pam_mujoco.init_mujoco(config)

    # for detecting contact with the robot
    pam_mujoco.add_robot1_contact_free_joint(SEGMENT_ID_CONTACT_ROBOT,
                                             ball.index_qpos,ball.index_qvel,
                                             ball.geom,robot.geom_racket)

    # adding the mirror ball controller, will play
    # recorded ball trajectories, until contact with robot
    pam_mujoco.add_mirror_until_contact_free_joint(SEGMENT_ID_BALL,
                                                   ball.joint,
                                                   ball.index_qpos,ball.index_qvel,
                                                   SEGMENT_ID_CONTACT_ROBOT)

    # adding mirroring robot controller
    pam_mujoco.add_mirror_robot(SEGMENT_ID_ROBOT_MIRROR,robot.joint)

    # set bursting mode if requested
    if bursting_mode:
        pam_mujoco.add_bursting(MUJOCO_ID,SEGMENT_ID_BURST)

    # starting the thread
    pam_mujoco.execute(MUJOCO_ID,MODEL_NAME)

    # looping until requested to stop
    while not pam_mujoco.is_stop_requested(MUJOCO_ID):
        time.sleep(0.01)

        
def parse_args(args):

    if any([a in args for a in ("help","-h","-help")]):
        return True,None,None,None
    
    graphics = True
    realtime = True
    bursting = False

    if "no-graphics" in args:
        graphics = False

    if "accelerated" in args:
        realtime = False

    if "bursting" in args:
        bursting = True

    return False, graphics, realtime, bursting


def usage():

    s = str("\n\tusage: pam_mujoco <list of optional args>\n"+
            "\t\t with optional args:\n"+
            "\t\t\t-h: display this message\n"+
            "\t\t\tno-graphics: no graphics\n"+
            "\t\t\taccelerated: run mujoco as fast as it can\n"+
            "\t\t\tbursting: o80 bursting mode\n\n")
    
    print(s)
            

def start():

    help_,graphics,realtime,bursting = parse_args(sys.argv)

    if(help_):
        usage()
        return

    print("\nstarting:")
    print("\tbursting:",bursting)
    print("\tgraphics:",graphics)
    print("\taccelerated:",not realtime,"\n")
    
    execute(bursting,graphics,realtime)

    
if __name__ == "__main__":

    start()
