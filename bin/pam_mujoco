#!/usr/bin/env python

import multiprocessing
import pam_mujoco
import o80_pam
import sys
import logging
import signal_handler
from lightargs import BrightArgs,Set,Range,Positive,FileExists


def start_mujoco(config):

    def execute(config):
        
        logging.info("creating mujoco model")
        model_name = "pam_mujoco_"+config.mujoco_id
        items = pam_mujoco.model_factory(model_name,
                                         table=True,robot1=True,
                                         goal=True,hit_point=True)
        ball = items["ball"]
        robot = items["robot"]
        goal = items["goal"]
        hit_point = items["hit_point"]

        logging.info("init mujoco")
        mconfig = pam_mujoco.MujocoConfig()
        mconfig.graphics = config.graphics
        mconfig.extended_graphics = False
        mconfig.realtime = config.accelerated
        pam_mujoco.init_mujoco(mconfig)

        logging.info("adding ball/robot contact detector")
        pam_mujoco.add_robot1_contact_free_joint(config.segment_id_contact_robot,
                                                 ball.index_qpos,ball.index_qvel,
                                                 ball.geom,robot.geom_racket)


        logging.info("adding o80 ball controller")
        pam_mujoco.add_mirror_until_contact_free_joint(config.segment_id_ball,
                                                       ball.joint,
                                                       ball.index_qpos,ball.index_qvel,
                                                       config.segment_id_contact_robot)

        logging.info("adding o80 goal controller")
        pam_mujoco.add_mirror_free_joint(config.segment_id_goal,
                                         goal.joint,
                                         goal.index_qpos,goal.index_qvel)

        logging.info("adding o80 hit-point controller")
        pam_mujoco.add_mirror_free_joint(config.segment_id_hit_point,
                                         hit_point.joint,
                                         hit_point.index_qpos,goal.index_qvel)

        logging.info("adding o80 robot mirroring controller")
        pam_mujoco.add_mirror_robot(config.segment_id_robot_mirror,robot.joint)

        if config.bursting_mode:
            logging.info("adding bursting controller")
            pam_mujoco.add_bursting(config.mujoco_id,config.segment_id_robot_mirror)

        logging.info("starting mujoco")
        pam_mujoco.execute(config.mujoco_id,model_name)

        
    process  = multiprocessing.Process(target=execute,
                                       args=(config,))
    pam_mujoco.clear(config.mujoco_id)
    process.start()
    pam_mujoco.mujoco_ids.wait_for_mujoco(config.mujoco_id)
    return process

        
        
def configure():
    config = BrightArgs("pam mujoco: a mujoco pam robot controlled via mirroring commands")
    config.add_operation("bursting_mode",
                         "will the backend be started in bursting mode ?")
    config.add_operation("graphics",
                         "will mujoco graphics be displayed ?")
    config.add_operation("accelerated",
                         "if true, mujoco will in accelerated time")
    config.add_option("segment_id",
                      o80_pam.segment_ids.robot,
                      "o80 backend segment_id",
                      str)
    config.add_option("mujoco_id",
                      pam_mujoco.mujoco_ids.robot,
                      "pam mujoco id",
                      str)
    config.add_option("segment_id_ball",
                      pam_mujoco.segment_ids.ball,
                      "segment_id of o80 ball controller",
                      str)
    config.add_option("segment_id_goal",
                      pam_mujoco.segment_ids.goal,
                      "segment_id of o80 goal controller",
                      str)
    config.add_option("segment_id_hit_point",
                      pam_mujoco.segment_ids.hit_point,
                      "segment_id of o80 hit point controller",
                      str)
    config.add_option("segment_id_robot_mirror",
                      pam_mujoco.segment_ids.mirroring,
                      "segment_id of o80 robot mirroring controller",
                      str),
    config.add_option("segment_id_contact_robot",
                      pam_mujoco.segment_ids.contact_robot,
                      "segment_id of contact information ball/robot",
                      str)
    change_all = False
    finished = config.dialog(change_all,sys.argv[1:])
    print()
    if not finished:
        return None
    return config


def execute():
    
    config = configure()

    if config is None:
        return
    
    log_handler = logging.StreamHandler(sys.stdout)
    logging.basicConfig(
        format="[PAM Mujoco mujoco_id: {}] %(message)s".format(config.mujoco_id),
        level=logging.DEBUG,
        handlers=[log_handler]
    )

    process = start_mujoco(config)
    try:
        process.join()
    except KeyboardInterrupt:
        logging.info("keyboard interrupt, requesting mujoco to stop")
        pam_mujoco.request_stop(config.mujoco_id)

    logging.info("exit")
    print()

    
    
if __name__ == "__main__":

    execute()

