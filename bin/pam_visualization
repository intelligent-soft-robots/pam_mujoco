#!/usr/bin/env python

import time
import o80
import pam_mujoco
import o80_pam
import sys
import logging
import signal_handler
from lightargs import BrightArgs,Set,Range,Positive,FileExists


def configure():
    config = BrightArgs("pam mujoco visualization: graphics for an instance of pam_mujoco")
    config.add_option("mujoco_id",
                      pam_mujoco.mujoco_ids.robot,
                      "mujoco id of the pam_mujoco instance to represent ",
                      str)
    config.add_option("segment_id_ball",
                      pam_mujoco.segment_ids.ball,
                      "segment_id of o80 ball controller",
                      str)
    config.add_option("segment_id_goal",
                      pam_mujoco.segment_ids.goal,
                      "segment_id of o80 goal controller",
                      str)
    config.add_option("segment_id_hit_point",
                      pam_mujoco.segment_ids.hit_point,
                      "segment_id of o80 hit point controller",
                      str)
    config.add_option("segment_id_robot_mirror",
                      pam_mujoco.segment_ids.mirroring,
                      "segment_id of o80 robot mirroring controller",
                      str),
    config.add_option("segment_id_contact_robot",
                      pam_mujoco.segment_ids.contact_robot,
                      "segment_id of contact information ball/robot",
                      str)
    change_all = False
    finished = config.dialog(change_all,sys.argv[1:])
    print()
    if finished:
        return config
    return None


def execute_visualization(config):

    logging.info("waiting for mujoco_id: {}".format(config.mujoco_id))
    status = pam_mujoco.mujoco_ids.wait_for_mujoco(config.mujoco_id)
    if not status:
        logging.info("keyboard interrupt, exiting")
        return
    
    suffix = "_visualization"
    mujoco_id = config.mujoco_id + suffix
    segment_id_robot = config.segment_id_robot_mirror+suffix
    segment_id_ball = config.segment_id_ball+suffix
    segment_id_goal = config.segment_id_goal+suffix
    segment_id_hit_point = config.segment_id_hit_point+suffix

    logging.info("starting mujoco")
    process = pam_mujoco.start_mujoco.ball_and_robot(mujoco_id,
                                                     segment_id_robot,
                                                     None, # we do not compute contact
                                                     segment_id_ball,
                                                     graphics=True,
                                                     extended_graphics=False,
                                                     realtime=False,
                                                     segment_id_goal=segment_id_goal,
                                                     segment_id_hit_point=segment_id_hit_point)

    # connects to the other instance of running pam_mujoco
    # we want to visualize
    logging.info("creating o80 robot mirroring frontend")
    robot_get = o80_pam.o80RobotMirroring(config.segment_id_robot_mirror)
    robot_set = o80_pam.o80RobotMirroring(segment_id_robot)
    logging.info("creating o80 ball mirroring frontend")
    ball_get = o80_pam.o80Ball(config.segment_id_ball)
    ball_set = o80_pam.o80Ball(segment_id_ball)
    logging.info("creating o80 goal mirroring frontend")
    goal_get = o80_pam.o80Goal(config.segment_id_goal)
    goal_set = o80_pam.o80Goal(segment_id_goal)
    logging.info("creating o80 hit point mirroring frontend")
    hit_point_get = o80_pam.o80HitPoint(config.segment_id_hit_point)
    hit_point_set = o80_pam.o80HitPoint(segment_id_hit_point)
    
    # running at 300 hz
    logging.info("creating frequency manager")
    frequency_manager = o80.FrequencyManager(300)

    logging.info("running ...")
    t_start = time.time()-6

    signal_handler.init()
    while not signal_handler.has_received_sigint():
        
        if time.time()-t_start > 5:
            t_start = time.time()
            logging.info("running ...")

        ball_position,ball_velocity = ball_get.get()
        ball_set.set(ball_position,ball_velocity,duration_ms=100)

        goal_position,goal_velocity = goal_get.get()
        goal_set.set(goal_position,goal_velocity,duration_ms=100)

        hit_point_position,hit_point_velocity = hit_point_get.get()
        hit_point_set.set(hit_point_position,hit_point_velocity,duration_ms=100)

        joint_positions,joint_velocities = robot_get.get()
        robot_set.set(joint_positions,joint_velocities,duration_ms=100)

        frequency_manager.wait()
            
    logging.info("keyboard interrupt, requesting mujoco to stop")
    pam_mujoco.request_stop(mujoco_id)

    process.join()


def execute():

    config = configure()

    if config is None:
        print()
        return
    
    log_handler = logging.StreamHandler(sys.stdout)
    logging.basicConfig(
        format="[PAM Mujoco visualization (mujoco_id: {})] %(message)s".format(config.mujoco_id),
        level=logging.DEBUG,
        handlers=[log_handler]
    )

    execute_visualization(config)

    logging.info("exit")
    print()

    
if __name__ == "__main__":

    execute()
