#!/usr/bin/env python3

# this assumes pam_mujoco_start_mirrored_robots
# or pam_mujoco_start_mirrored_robots_accelerated
# has been started

import math
import sys
import random
import pam_interface
import o80_pam
import pam_mujoco
from pam_mujoco import mirroring
from lightargs import BrightArgs,FileExists


def _run(segment_id_o80_pam,
         segment_id_robot_mirror,
         accelerated_time,
         pam_config):

    def _get_random_action(min_pressure,max_pressure,nb_dofs):
        return [ [random.randint(min_pressure,max_pressure),random.randint(min_pressure,max_pressure)]
                 for _ in range(nb_dofs) ]
        
    nb_dofs = 4
    min_pressure = 10000
    max_pressure = 18000
    zero_pressure = [(max_pressure,max_pressure)]*nb_dofs
    reference_posture = [-math.pi/4.0,math.pi/3.5,
                         math.pi/8.0,0.0]
    
    o80_pressures = o80_pam.o80Pressures(segment_id_o80_pam)
    o80_mirroring = o80_pam.o80RobotMirroring(segment_id_robot_mirror)

    mirroring.align_robots(o80_pressures,o80_mirroring)

    for _ in range(100):

        print("going to pressure posture |",zero_pressure)
        mirroring.go_to_pressure_posture(o80_pressures,o80_mirroring,
                                         zero_pressure,0.5,accelerated_time)


        print("going to position posture |",reference_posture)
        mirroring.go_to_position_posture(o80_pressures,o80_mirroring,
                                         reference_posture,pam_config,
                                         accelerated_time)

        for _ in range(20):
            random_action = _get_random_action(min_pressure,
                                               max_pressure,
                                               nb_dofs)
            print("going to random pressure posture |",random_action)
            mirroring.go_to_pressure_posture(o80_pressures,o80_mirroring,
                                             random_action,
                                             0.1,
                                             accelerated_time)
        

def _configure():
    config = BrightArgs(str("demo of pam mujoco robot mirroring a (pseudo) real robot\n"))
    config.add_operation("accelerated",
                         "to set True if the pseudo real robot started in accelerated mode")
    config.add_option("pam_config_file",
                      pam_interface.DefaultConfiguration.get_path(),
                      "pam configuration file",
                      str,
                      integrity_checks= [FileExists()])
    config.add_option("segment_id_robot_mirror",
                      pam_mujoco.segment_ids.mirroring,
                      "segment_id of the pam_mujoco robot mirroring o80 controller",
                      str)
    config.add_option("segment_id_o80_pam",
                      o80_pam.segment_ids.robot,
                      "segment_id of the o80_real or o80_mujoco instance",
                      str)
    change_all=False
    finished  = config.dialog(change_all,sys.argv[1:])
    if not finished:
        return None
    return config


def _execute():
    config = _configure()
    if config is None:
        return
    pam_config = pam_interface.JsonConfiguration(config.pam_config_file)
    _run(config.segment_id_o80_pam,
         config.segment_id_robot_mirror,
         config.accelerated,
         pam_config)


if __name__ == "__main__":
    _execute()
